<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro --inorder '$(find terabot_description)/urdf/terabot.xacro'" />

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find terabot_gazebo)/worlds/clearpath_playpen.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- ros_control terabot launch file -->
  <include file="$(find terabot_control)/launch/terabot_control.launch" /> 

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-x $(arg x)
        -y $(arg y)
        -z $(arg z)
        -R $(arg roll)
        -P $(arg pitch)
        -Y $(arg yaw)
        -unpause
        -urdf -model terabot -param robot_description"/>

  <!-- Include poincloud_to_laserscan if simulated realsense D435i is attached -->
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
    <remap from="cloud_in" to="/terabot/depth1/depth/points"/>
    <remap from="scan" to="scan"/>
    <rosparam>
      target_frame: depth_camera # Leave empty to output scan in the pointcloud frame
      tolerance: 1.0
      min_height: 0.05
      max_height: 1.0

      angle_min: -0.785 # -45.0*M_PI/180.0
      angle_max: 0.785 # 45.0*M_PI/180.0
      angle_increment: 0.005 # M_PI/360.0
      scan_time: 0.033333 # 30Hz
      range_min: 0.2
      range_max: 10.0
      use_inf: true

      # Concurrency level, affects number of pointclouds queued for processing and number of threads used
      # 0 : Detect number of cores
      # 1 : Single threaded
      # 2->inf : Parallelism level
      concurrency_level: 0
    </rosparam>
  </node>

  <!--- Depth image to laser scan -->
  <!--node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" >
    <param name="scan_height" value="1"/>
    <param name="scan_time" value="0.033"/>
    <param name="range_min" value="0.2"/>
    <param name="range_max" value="10.0"/>
    <param name="output_frame_id" value="depth_camera"/>
    <remap from="image" to="/terabot/depth1/depth/image_raw" />
  </node-->
 <!-- Run RVIZ-->
  <node name="$(anon rviz)" pkg="rviz" type="rviz" args="-d $(find terabot_gazebo)/terabot.rviz" output="screen" required="true"/>

</launch>